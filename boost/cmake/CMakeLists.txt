Project(boost)

cmake_minimum_required(VERSION 2.8.6)

if(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

set(BOOST_MAJOR_VERSION 1)
set(BOOST_MINOR_VERSION 60)
set(BOOST_VERSION ${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION})

set(BOOST_PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")
set(SG_PROJECT_DIR "${BOOST_PROJECT_DIR}/..")

include(${SG_PROJECT_DIR}/cmake/common.cmake)
include(${SG_PROJECT_DIR}/cmake/compiler.cmake)

set(SG_LIB_DIR "${SG_PROJECT_DIR}/lib/${SG_TARGET_PLATFORM_NAME}")
set(SG_BIN_DIR "${SG_PROJECT_DIR}/bin/${SG_TARGET_PLATFORM_NAME}")

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

include(${SG_PROJECT_DIR}/cmake/configboost.cmake)

if(MSVC)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3 /WX-")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX-")
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")
endif()

if(CMAKE_GENERATOR MATCHES "ARM")
	add_definitions(-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE)
endif()
IF(MSVC)
	add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
	add_definitions(-D_SCL_SECURE_NO_DEPRECATE)
endif()

add_definitions(-DBOOST_ALL_DYN_LINK=1)
if(MSVC)
	set(ABI_SUFFIX_DEBUG "-gd")
else()
	set(ABI_SUFFIX_DEBUG "-d")
endif()
set(ABI_SUFFIX_OPTIMIZED "")

set(BOOST_LIB_NAME_SUFFIX_DEBUG -${SG_COMPILER_NAME}${SG_COMPILER_VERSION}-mt${ABI_SUFFIX_DEBUG}-${Boost_LIB_VERSION})
set(BOOST_LIB_NAME_SUFFIX_OPTIMIZED -${SG_COMPILER_NAME}${SG_COMPILER_VERSION}-mt${ABI_SUFFIX_OPTIMIZED}-${Boost_LIB_VERSION})

macro(SETUP_BOOST_LIBRARY LIB_NAME)
    source_group("Source Files" FILES ${SOURCE_FILES})
    include_directories(${BOOST_PROJECT_DIR}/)

    if(SG_PLATFORM_LINUX)
        link_directories(${SG_BIN_DIR})
    else()
        link_directories(${SG_LIB_DIR})
    endif()

    add_library(${LIB_NAME} "SHARED"
		${SOURCE_FILES}
	)

	set_target_properties(${LIB_NAME} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${SG_LIB_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${SG_LIB_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${SG_LIB_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${SG_LIB_DIR}
        ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${SG_LIB_DIR}
		PROJECT_LABEL ${LIB_NAME}
		DEBUG_POSTFIX ""
		DEBUG_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_DEBUG}
		RELEASE_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		RELWITHDEBINFO_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
		MINSIZEREL_OUTPUT_NAME boost_${LIB_NAME}${BOOST_LIB_NAME_SUFFIX_OPTIMIZED}
	)

    if(SG_PLATFORM_LINUX)
		set_target_properties(${LIB_NAME} PROPERTIES
            LIBRARY_OUTPUT_DIRECTORY ${SG_BIN_DIR}
            LIBRARY_OUTPUT_DIRECTORY_DEBUG ${SG_BIN_DIR}
            LIBRARY_OUTPUT_DIRECTORY_RELEASE ${SG_BIN_DIR}
            LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${SG_BIN_DIR}
            LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${SG_BIN_DIR})
    else()
        set_target_properties(${LIB_NAME} PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${SG_BIN_DIR}
            RUNTIME_OUTPUT_DIRECTORY_DEBUG ${SG_BIN_DIR}
            RUNTIME_OUTPUT_DIRECTORY_RELEASE ${SG_BIN_DIR}
            RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${SG_BIN_DIR}
            RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${SG_BIN_DIR})
	endif()

	target_link_libraries(${LIB_NAME}
		${EXTRA_LINKED_LIBRARIES})

    if(SG_PLATFORM_WINDOWS)
		install(TARGETS ${LIB_NAME}
            RUNTIME DESTINATION ${SG_BIN_DIR}
            LIBRARY DESTINATION ${SG_BIN_DIR}
		)
	endif()
endmacro()

add_subdirectory(filesystem)
add_subdirectory(program_options)
add_subdirectory(system)
