IF(UNIX)
	SET(SG_COMPILER_NAME "gcc")


	EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	STRING(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
	LIST(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
	LIST(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
	SET(SG_COMPILER_VERSION ${GCC_MAJOR}${GCC_MINOR})

    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W -Wall -Wno-unused -Wno-unused-but-set-variable -march=core2")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Wno-unused -Wno-unused-but-set-variable -march=core2")
	

	IF(SG_COMPILER_VERSION STRLESS "47")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c1x")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
	ELSE()
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	ENDIF()
	
	SET(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -g -O0" )
	SET(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O2" )
	IF(SG_ARCH_NAME MATCHES "x86")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32 -Wl,-z,-defs")
		SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -m32 -Wl,-z,-defs")
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32 -Wl,-z,-defs")
	ELSEIF(SG_ARCH_NAME MATCHES "x64")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64 -mtune=generic")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -mtune=generic")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m64 -Wl,-z,-defs")
		SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -m64 -Wl,-z,-defs")
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64 -Wl,-z,-defs")
	ENDIF()
ENDIF()

SET(CMAKE_C_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
SET(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})

SET(SG_OUTPUT_SUFFIX _${SG_COMPILER_NAME}${SG_COMPILER_VERSION})

SET(BOOST_ROOT "${SG_ROOT_DIR}/thirdparty/boost")
SET(BOOST_LIBRARYDIR "${BOOST_ROOT}/lib/${SG_PLATFORM_NAME}/lib")
SET(BOOST_COMPONENTS "")
IF(UNIX)
	SET(BOOST_COMPONENTS ${BOOST_COMPONENTS} chrono filesystem program_options regex system thread)
ENDIF()

FIND_PACKAGE(Boost COMPONENTS ${BOOST_COMPONENTS})

IF(NOT Boost_LIBRARY_DIR)
	SET(Boost_LIBRARY_DIR ${Boost_LIBRARY_DIRS})
ENDIF()
